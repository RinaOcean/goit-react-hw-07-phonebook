{"version":3,"sources":["components/ContactsList/ContactList.jsx","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactListItem/ContactsListItem.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","App.js","redux/store.js","index.js"],"names":["ContactsList","children","className","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","addFilter","items","createReducer","state","payload","filter","item","id","_","loading","combineReducers","axios","defaults","baseURL","getItems","contacts","getLoadingItems","getFilterValue","getFilteredContactList","createSelector","allContacts","normalizedFilter","toLocaleLowerCase","name","includes","connect","contactsItems","dispatch","onDelete","contactID","delete","then","catch","error","map","number","type","onClick","ContactForm","nameInputId","nanoid","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","some","contact","alert","onSubmit","reset","this","htmlFor","pattern","title","required","onChange","Component","post","data","addContact","target","App","fetchItems","length","isLoading","Spinner","animation","a","get","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b15cd630.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport './ContactsList.scss';\r\n\r\nconst ContactsList = ({ children }) => (\r\n  <ul className=\"ContactsList\">{children}</ul>\r\n);\r\n\r\nContactsList.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ContactsList;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const removeContactRequest = createAction(\r\n  'contacts/removeContactRequest',\r\n);\r\nexport const removeContactSuccess = createAction(\r\n  'contacts/removeContactSuccess',\r\n);\r\nexport const removeContactError = createAction('contacts/removeContactError');\r\n\r\nexport const addFilter = createAction('contacts/addFilter');\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n  addFilter,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactSuccess]: (state, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [removeContactSuccess]: (state, { payload }) =>\r\n    state.filter(item => item.id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  // \"_\" заменяет неиспользуемый параметр(в данном случае state)\r\n  [addFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactRequest]: () => true,\r\n  [fetchContactSuccess]: () => false,\r\n  [fetchContactError]: () => false,\r\n\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n\r\n  [removeContactRequest]: () => true,\r\n  [removeContactSuccess]: () => false,\r\n  [removeContactError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3001';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactRequest);\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n};\r\n\r\nexport const addContact = ({ name, number }) => dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nexport const removeContact = contactID => dispatch => {\r\n  dispatch(removeContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactID}`)\r\n    .then(() => dispatch(removeContactSuccess(contactID)))\r\n    .catch(error => dispatch(removeContactError(error)));\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getItems = state => state.contacts.items;\r\n\r\nexport const getLoadingItems = state => state.contacts.loading;\r\n\r\nexport const getFilterValue = state => state.contacts.filter;\r\n\r\nexport const getFilteredContactList = createSelector(\r\n  [getItems, getFilterValue],\r\n  (allContacts, filter) => {\r\n    const normalizedFilter = filter.toLocaleLowerCase();\r\n\r\n    return allContacts.filter(item =>\r\n      item.name.toLocaleLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { removeContact, getFilteredContactList } from '../../redux/contacts';\r\n\r\nimport './ContactsListItem.scss';\r\n\r\nconst ContactsListItem = ({ onDelete, contactsItems }) => (\r\n  <>\r\n    {contactsItems.map(({ id, name, number }) => {\r\n      return (\r\n        <li key={id} className=\"ContactsListItem\">\r\n          {name}: {number}\r\n          <button type=\"button\" onClick={() => onDelete(id)}>\r\n            Delete\r\n          </button>\r\n        </li>\r\n      );\r\n    })}\r\n  </>\r\n);\r\n\r\nContactsListItem.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contactsItems: getFilteredContactList(state),\r\n});\r\n\r\nconst mapDispatchFromProps = dispatch => ({\r\n  onDelete: id => dispatch(removeContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchFromProps)(ContactsListItem);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { nanoid } from 'nanoid';\r\nimport PropTypes from 'prop-types';\r\nimport { addContact, getItems } from '../../redux/contacts';\r\n\r\nimport './ContactForm.scss';\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n  };\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = nanoid();\r\n  numberInputId = nanoid();\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const isInContacts = contact =>\r\n      contact.name === this.state.name || contact.number === this.state.number;\r\n\r\n    if (this.props.items.some(isInContacts)) {\r\n      alert(`Contact is already in contacts`);\r\n      return;\r\n    }\r\n    this.props.onSubmit({ ...this.state });\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className=\"ContactForm\" onSubmit={this.handleSubmit}>\r\n        <label htmlFor={this.nameInputId}>Name</label>\r\n        <input\r\n          type=\"text\"\r\n          value={name}\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={this.handleChange}\r\n          id={this.nameInputId}\r\n        />\r\n        <label htmlFor={this.numberInputId}>Number</label>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n          required\r\n          onChange={this.handleChange}\r\n          id={this.numberInputId}\r\n        />\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  items: getItems(state),\r\n});\r\n\r\nconst mapDispatchFromProps = dispatch => ({\r\n  onSubmit: ({ name, number }) => dispatch(addContact({ name, number })),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchFromProps)(ContactForm);\r\n","import { connect } from 'react-redux';\r\nimport { addFilter, getFilterValue } from '../../redux/contacts';\r\n\r\nimport './Filter.scss';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className=\"Filter\">\r\n    Find contacts by name\r\n    <input type=\"text\" value={value} onChange={onChange}></input>\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: getFilterValue(state),\r\n});\r\n\r\nconst mapDispatchFromProps = dispatch => ({\r\n  onChange: event => dispatch(addFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchFromProps)(Filter);\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Spinner from 'react-bootstrap/Spinner';\n\nimport ContactsList from './components/ContactsList';\nimport ContactsListItem from './components/ContactListItem';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\n\nimport { fetchContacts } from './redux/contacts/contacts-operations';\nimport { getItems, getLoadingItems } from './redux/contacts/contacts-selectors';\n\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchItems();\n  }\n\n  render() {\n    return (\n      <div className=\"phonebook\">\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n\n        {this.props.items.length > 0 ? (\n          <>\n            <Filter />\n\n            <ContactsList>\n              {this.props.isLoading && <Spinner animation=\"border\" />}\n              <ContactsListItem />\n            </ContactsList>\n          </>\n        ) : (\n          <span>You have no contacts yet </span>\n        )}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  items: getItems(state),\n  isLoading: getLoadingItems(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchItems: () => dispatch(fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  // persistStore,\r\n  // persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts';\r\n\r\n// const contactsPersistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    // contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\n\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}